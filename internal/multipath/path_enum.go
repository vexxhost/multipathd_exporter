// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package multipath

import (
	"fmt"
	"strings"
)

const (
	// PathCheckerStateReady is a PathCheckerState of type ready.
	PathCheckerStateReady PathCheckerState = "ready"
	// PathCheckerStateFaulty is a PathCheckerState of type faulty.
	PathCheckerStateFaulty PathCheckerState = "faulty"
	// PathCheckerStateShaky is a PathCheckerState of type shaky.
	PathCheckerStateShaky PathCheckerState = "shaky"
	// PathCheckerStateGhost is a PathCheckerState of type ghost.
	PathCheckerStateGhost PathCheckerState = "ghost"
	// PathCheckerStateDelayed is a PathCheckerState of type delayed.
	PathCheckerStateDelayed PathCheckerState = "delayed"
	// PathCheckerStateIOPending is a PathCheckerState of type i/o pending.
	PathCheckerStateIOPending PathCheckerState = "i/o pending"
	// PathCheckerStateIOTimeout is a PathCheckerState of type i/o timeout.
	PathCheckerStateIOTimeout PathCheckerState = "i/o timeout"
	// PathCheckerStateUndef is a PathCheckerState of type undef.
	PathCheckerStateUndef PathCheckerState = "undef"
)

var ErrInvalidPathCheckerState = fmt.Errorf("not a valid PathCheckerState, try [%s]", strings.Join(_PathCheckerStateNames, ", "))

var _PathCheckerStateNames = []string{
	string(PathCheckerStateReady),
	string(PathCheckerStateFaulty),
	string(PathCheckerStateShaky),
	string(PathCheckerStateGhost),
	string(PathCheckerStateDelayed),
	string(PathCheckerStateIOPending),
	string(PathCheckerStateIOTimeout),
	string(PathCheckerStateUndef),
}

// PathCheckerStateNames returns a list of possible string values of PathCheckerState.
func PathCheckerStateNames() []string {
	tmp := make([]string, len(_PathCheckerStateNames))
	copy(tmp, _PathCheckerStateNames)
	return tmp
}

// PathCheckerStateValues returns a list of the values for PathCheckerState
func PathCheckerStateValues() []PathCheckerState {
	return []PathCheckerState{
		PathCheckerStateReady,
		PathCheckerStateFaulty,
		PathCheckerStateShaky,
		PathCheckerStateGhost,
		PathCheckerStateDelayed,
		PathCheckerStateIOPending,
		PathCheckerStateIOTimeout,
		PathCheckerStateUndef,
	}
}

// String implements the Stringer interface.
func (x PathCheckerState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PathCheckerState) IsValid() bool {
	_, err := ParsePathCheckerState(string(x))
	return err == nil
}

var _PathCheckerStateValue = map[string]PathCheckerState{
	"ready":       PathCheckerStateReady,
	"faulty":      PathCheckerStateFaulty,
	"shaky":       PathCheckerStateShaky,
	"ghost":       PathCheckerStateGhost,
	"delayed":     PathCheckerStateDelayed,
	"i/o pending": PathCheckerStateIOPending,
	"i/o timeout": PathCheckerStateIOTimeout,
	"undef":       PathCheckerStateUndef,
}

// ParsePathCheckerState attempts to convert a string to a PathCheckerState.
func ParsePathCheckerState(name string) (PathCheckerState, error) {
	if x, ok := _PathCheckerStateValue[name]; ok {
		return x, nil
	}
	return PathCheckerState(""), fmt.Errorf("%s is %w", name, ErrInvalidPathCheckerState)
}

// MarshalText implements the text marshaller method.
func (x PathCheckerState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PathCheckerState) UnmarshalText(text []byte) error {
	tmp, err := ParsePathCheckerState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *PathCheckerState) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
