// Code generated by go-enum DO NOT EDIT.
// Version: v0.9.1

// Built By: go install

package multipath

import (
	"fmt"
	"strings"
)

const (
	// DeviceStateRunning is a DeviceState of type running.
	DeviceStateRunning DeviceState = "running"
	// DeviceStateOffline is a DeviceState of type offline.
	DeviceStateOffline DeviceState = "offline"
	// DeviceStateUnknown is a DeviceState of type unknown.
	DeviceStateUnknown DeviceState = "unknown"
)

var ErrInvalidDeviceState = fmt.Errorf("not a valid DeviceState, try [%s]", strings.Join(_DeviceStateNames, ", "))

var _DeviceStateNames = []string{
	string(DeviceStateRunning),
	string(DeviceStateOffline),
	string(DeviceStateUnknown),
}

// DeviceStateNames returns a list of possible string values of DeviceState.
func DeviceStateNames() []string {
	tmp := make([]string, len(_DeviceStateNames))
	copy(tmp, _DeviceStateNames)
	return tmp
}

// DeviceStateValues returns a list of the values for DeviceState
func DeviceStateValues() []DeviceState {
	return []DeviceState{
		DeviceStateRunning,
		DeviceStateOffline,
		DeviceStateUnknown,
	}
}

// String implements the Stringer interface.
func (x DeviceState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DeviceState) IsValid() bool {
	_, err := ParseDeviceState(string(x))
	return err == nil
}

var _DeviceStateValue = map[string]DeviceState{
	"running": DeviceStateRunning,
	"offline": DeviceStateOffline,
	"unknown": DeviceStateUnknown,
}

// ParseDeviceState attempts to convert a string to a DeviceState.
func ParseDeviceState(name string) (DeviceState, error) {
	if x, ok := _DeviceStateValue[name]; ok {
		return x, nil
	}
	return DeviceState(""), fmt.Errorf("%s is %w", name, ErrInvalidDeviceState)
}

// MarshalText implements the text marshaller method.
func (x DeviceState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *DeviceState) UnmarshalText(text []byte) error {
	tmp, err := ParseDeviceState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *DeviceState) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

const (
	// MarginalStateMarginal is a MarginalState of type marginal.
	MarginalStateMarginal MarginalState = "marginal"
	// MarginalStateNormal is a MarginalState of type normal.
	MarginalStateNormal MarginalState = "normal"
)

var ErrInvalidMarginalState = fmt.Errorf("not a valid MarginalState, try [%s]", strings.Join(_MarginalStateNames, ", "))

var _MarginalStateNames = []string{
	string(MarginalStateMarginal),
	string(MarginalStateNormal),
}

// MarginalStateNames returns a list of possible string values of MarginalState.
func MarginalStateNames() []string {
	tmp := make([]string, len(_MarginalStateNames))
	copy(tmp, _MarginalStateNames)
	return tmp
}

// MarginalStateValues returns a list of the values for MarginalState
func MarginalStateValues() []MarginalState {
	return []MarginalState{
		MarginalStateMarginal,
		MarginalStateNormal,
	}
}

// String implements the Stringer interface.
func (x MarginalState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MarginalState) IsValid() bool {
	_, err := ParseMarginalState(string(x))
	return err == nil
}

var _MarginalStateValue = map[string]MarginalState{
	"marginal": MarginalStateMarginal,
	"normal":   MarginalStateNormal,
}

// ParseMarginalState attempts to convert a string to a MarginalState.
func ParseMarginalState(name string) (MarginalState, error) {
	if x, ok := _MarginalStateValue[name]; ok {
		return x, nil
	}
	return MarginalState(""), fmt.Errorf("%s is %w", name, ErrInvalidMarginalState)
}

// MarshalText implements the text marshaller method.
func (x MarginalState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MarginalState) UnmarshalText(text []byte) error {
	tmp, err := ParseMarginalState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *MarginalState) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

const (
	// PathDeviceMapperStateActive is a PathDeviceMapperState of type active.
	PathDeviceMapperStateActive PathDeviceMapperState = "active"
	// PathDeviceMapperStateFailed is a PathDeviceMapperState of type failed.
	PathDeviceMapperStateFailed PathDeviceMapperState = "failed"
	// PathDeviceMapperStateUndef is a PathDeviceMapperState of type undef.
	PathDeviceMapperStateUndef PathDeviceMapperState = "undef"
)

var ErrInvalidPathDeviceMapperState = fmt.Errorf("not a valid PathDeviceMapperState, try [%s]", strings.Join(_PathDeviceMapperStateNames, ", "))

var _PathDeviceMapperStateNames = []string{
	string(PathDeviceMapperStateActive),
	string(PathDeviceMapperStateFailed),
	string(PathDeviceMapperStateUndef),
}

// PathDeviceMapperStateNames returns a list of possible string values of PathDeviceMapperState.
func PathDeviceMapperStateNames() []string {
	tmp := make([]string, len(_PathDeviceMapperStateNames))
	copy(tmp, _PathDeviceMapperStateNames)
	return tmp
}

// PathDeviceMapperStateValues returns a list of the values for PathDeviceMapperState
func PathDeviceMapperStateValues() []PathDeviceMapperState {
	return []PathDeviceMapperState{
		PathDeviceMapperStateActive,
		PathDeviceMapperStateFailed,
		PathDeviceMapperStateUndef,
	}
}

// String implements the Stringer interface.
func (x PathDeviceMapperState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PathDeviceMapperState) IsValid() bool {
	_, err := ParsePathDeviceMapperState(string(x))
	return err == nil
}

var _PathDeviceMapperStateValue = map[string]PathDeviceMapperState{
	"active": PathDeviceMapperStateActive,
	"failed": PathDeviceMapperStateFailed,
	"undef":  PathDeviceMapperStateUndef,
}

// ParsePathDeviceMapperState attempts to convert a string to a PathDeviceMapperState.
func ParsePathDeviceMapperState(name string) (PathDeviceMapperState, error) {
	if x, ok := _PathDeviceMapperStateValue[name]; ok {
		return x, nil
	}
	return PathDeviceMapperState(""), fmt.Errorf("%s is %w", name, ErrInvalidPathDeviceMapperState)
}

// MarshalText implements the text marshaller method.
func (x PathDeviceMapperState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PathDeviceMapperState) UnmarshalText(text []byte) error {
	tmp, err := ParsePathDeviceMapperState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *PathDeviceMapperState) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}

const (
	// PathGroupDeviceMapperStateEnabled is a PathGroupDeviceMapperState of type enabled.
	PathGroupDeviceMapperStateEnabled PathGroupDeviceMapperState = "enabled"
	// PathGroupDeviceMapperStateDisabled is a PathGroupDeviceMapperState of type disabled.
	PathGroupDeviceMapperStateDisabled PathGroupDeviceMapperState = "disabled"
	// PathGroupDeviceMapperStateActive is a PathGroupDeviceMapperState of type active.
	PathGroupDeviceMapperStateActive PathGroupDeviceMapperState = "active"
	// PathGroupDeviceMapperStateUndef is a PathGroupDeviceMapperState of type undef.
	PathGroupDeviceMapperStateUndef PathGroupDeviceMapperState = "undef"
)

var ErrInvalidPathGroupDeviceMapperState = fmt.Errorf("not a valid PathGroupDeviceMapperState, try [%s]", strings.Join(_PathGroupDeviceMapperStateNames, ", "))

var _PathGroupDeviceMapperStateNames = []string{
	string(PathGroupDeviceMapperStateEnabled),
	string(PathGroupDeviceMapperStateDisabled),
	string(PathGroupDeviceMapperStateActive),
	string(PathGroupDeviceMapperStateUndef),
}

// PathGroupDeviceMapperStateNames returns a list of possible string values of PathGroupDeviceMapperState.
func PathGroupDeviceMapperStateNames() []string {
	tmp := make([]string, len(_PathGroupDeviceMapperStateNames))
	copy(tmp, _PathGroupDeviceMapperStateNames)
	return tmp
}

// PathGroupDeviceMapperStateValues returns a list of the values for PathGroupDeviceMapperState
func PathGroupDeviceMapperStateValues() []PathGroupDeviceMapperState {
	return []PathGroupDeviceMapperState{
		PathGroupDeviceMapperStateEnabled,
		PathGroupDeviceMapperStateDisabled,
		PathGroupDeviceMapperStateActive,
		PathGroupDeviceMapperStateUndef,
	}
}

// String implements the Stringer interface.
func (x PathGroupDeviceMapperState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PathGroupDeviceMapperState) IsValid() bool {
	_, err := ParsePathGroupDeviceMapperState(string(x))
	return err == nil
}

var _PathGroupDeviceMapperStateValue = map[string]PathGroupDeviceMapperState{
	"enabled":  PathGroupDeviceMapperStateEnabled,
	"disabled": PathGroupDeviceMapperStateDisabled,
	"active":   PathGroupDeviceMapperStateActive,
	"undef":    PathGroupDeviceMapperStateUndef,
}

// ParsePathGroupDeviceMapperState attempts to convert a string to a PathGroupDeviceMapperState.
func ParsePathGroupDeviceMapperState(name string) (PathGroupDeviceMapperState, error) {
	if x, ok := _PathGroupDeviceMapperStateValue[name]; ok {
		return x, nil
	}
	return PathGroupDeviceMapperState(""), fmt.Errorf("%s is %w", name, ErrInvalidPathGroupDeviceMapperState)
}

// MarshalText implements the text marshaller method.
func (x PathGroupDeviceMapperState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PathGroupDeviceMapperState) UnmarshalText(text []byte) error {
	tmp, err := ParsePathGroupDeviceMapperState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *PathGroupDeviceMapperState) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
